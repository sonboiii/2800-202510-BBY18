<%- include('templates/header', { 
    title: 'Nearby Grocery Stores',
    cssFiles: ['https://unpkg.com/leaflet@1.9.3/dist/leaflet.css'],
}) %>

<style>
    /* Override Bootstrap container constraints for full-screen map */
    .map-container {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        z-index: 1;
    }
    
    /* Ensure navbar stays on top */
    .navbar {
        position: relative;
        z-index: 1002;
        margin-bottom: 0 !important;
    }
    
    /* Ensure footer stays on top when visible */
    footer {
        position: relative;
        z-index: 1002;
    }
    
    #map { 
        width: 100%; 
        height: 100vh;
    }
    
    #enable-loc {
        position: absolute;
        top: 80px; 
        left: 50%;
        transform: translateX(-50%);
        z-index: 1000;
        padding: .5em 1em;
        background: white;
        border: 1px solid #ccc;
        border-radius: 4px;
        cursor: pointer;
        box-shadow: 0 2px 4px rgba(0,0,0,0.2);
    }
</style>

<!-- Button to trigger geolocation prompt -->
<button id="enable-loc">
    <%= (lat && lon) ? 'Refresh Precise Location' : 'Enable Precise Location' %>
</button>

<div class="map-container">
    <div id="map"></div>
</div>

<script src="https://unpkg.com/leaflet@1.9.3/dist/leaflet.js"></script>
<script>
    // Server-rendered values (may be null)
    const serverLat = <%= lat !== null ? lat : 'null' %>;
    const serverLon = <%= lon !== null ? lon : 'null' %>;
    const stores    = <%- JSON.stringify(stores) %>;

    // If no coords yet, show world view; otherwise zoom into the user
    const initialView = (serverLat && serverLon)
        ? [serverLat, serverLon]
        : [20, 0];      
    const initialZoom = (serverLat && serverLon) ? 15 : 2;

    const map = L.map('map').setView(initialView, initialZoom);
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: 'Â© OpenStreetMap contributors'
    }).addTo(map);

    // If we have real coords, plot the user and stores
    if (serverLat && serverLon) {
        L.marker([serverLat, serverLon])
            .addTo(map)
            .bindPopup('Your location')
            .openPopup();

        stores.forEach(s => {
            L.marker([s.lat, s.lon])
                .addTo(map)
                .bindPopup(s.name);
        });

        document.getElementById('enable-loc').style.display = 'none';
    }

    // On click, ask for HTML5 Geolocation
    document.getElementById('enable-loc').onclick = () => {
        if (!navigator.geolocation) {
            return alert('Geolocation not supported by your browser');
        }
        navigator.geolocation.getCurrentPosition(
            ({ coords }) => {
                const lat = coords.latitude.toFixed(6);
                const lon = coords.longitude.toFixed(6);
                // reload page with query-string
                window.location.href = `/stores?lat=${lat}&lon=${lon}`;
            },
            (err) => {
                alert('Could not retrieve your location: ' + err.message);
            },
            { enableHighAccuracy: true, timeout: 10000 }
        );
    };
</script>

<%- include('templates/footer') %>
